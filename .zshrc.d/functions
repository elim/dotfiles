# -*- mode: shell-script; coding: utf-8-unix -*-

## http://d.hatena.ne.jp/spiritloose/20060927/1159286301
function chpwd() {
  ls
}

## http://kitaj.no-ip.com/tdiary/20060927.html
# function cdup() {
#   echo
#   cd ..
#   zle reset-prompt
# }
#
# bindkey '\^' cdup
# zle -N cdup

## http://nijino.homelinux.net/diary/200206.shtml#200206140
if [[ "$TERM" = "screen" ]]; then
  function preexec() {
    # see [zsh-workers:13180]
    # http://www.zsh.org/mla/workers/2000/msg03993.html
    emulate -L zsh
    local -a cmd; cmd=(${(z)2})
    case $cmd[1] in
      fg)
	if (( $#cmd == 1 )); then
	  cmd=(builtin jobs -l %+)
	else
	  cmd=(builtin jobs -l $cmd[2])
	fi
	;;
      %*) 
	cmd=(builtin jobs -l $cmd[1])
	;;
      cd)
	if (( $#cmd == 2)); then
	  cmd[1]=$cmd[2]
	fi
	;&
	*)
  echo -n "\ek$cmd[1]:t\e\\"
  return
  ;;
  esac

  local -A jt; jt=(${(kv)jobtexts})

  $cmd >>(read num rest
    cmd=(${(z)${(e):-\$jt$num}})
    printf "\033k$cmd[1]:t\033\\") 2>/dev/null
  }
fi

case ${UNAME} in 
  CYGWIN*)
    function open() {
      local prog arg

      if [[ "$#" -gt 0 ]]; then
	case ${1} in
	  -a)
	    shift
	    prog="${1}"

	    if ! where ${prog} > /dev/null; then
	      arg=${prog}
	      prog="cygstart"
	    fi

	    shift
	    ;;    
	  -e)
	    prog="emacsclient --no-wait"
	    shift
	    if [[ "$#" = 0 ]]; then
	      echo "hmm... missing argument(s)."
	      return
	    fi
	    ;;
	  *)
	    prog="cygstart"
	    ;;
	esac
      else
	echo "hmm... missing argument(s)."
	return
      fi
      
      while [[ "$#" -gt 0 ]]; do
	arg="${arg} ${1}"
	shift
      done
      eval ${prog} ${arg} &
    }
    ;;
  Darwin)
    function zzz() {
      local prev_hibernatemode
      prev_hibernatemode=$(pmset -g | awk '/hibernatemode/ {print $2}')

      if [[ "$#" -gt 0 ]]; then
	case ${1} in
          -s|--safe) sudo pmset -a hibernatemode 3 ;;
          -d|--deep) sudo pmset -a hibernatemode 1 ;;
        esac
      fi

      osascript -e "tell application \"System Events\" to sleep"
      sudo pmset -a hibernatemode ${prev_hibernatemode}
    }
    ;;
esac

function zsh-greater-version-p() {
  if [[ "$#" -eq 0 ]]; then
    echo Usage: zsh-grater-version-p MINIMUM_VERSION
    return 1
  fi

  local tmp zsh_version minimum_version
  tmp="$(echo $ZSH_VERSION|sed -e 's/\./ /g')"; zsh_version=(${(z)tmp})
  tmp="$(echo ${1}|sed -e 's/\./ /g')";  minimum_version=(${(z)tmp})

  if [[ ${#zsh_version} -eq ${#minimum_version} ]]; then
    local length
    length=${#zsh_version}

    for i in {1..${length}}; do
      if [[ ${${zsh_version}[$i]} -gt ${${minimum_version}[$i]} ]]; then
        return 0
      elif [[ ${${zsh_version}[$i]} -lt ${${minimum_version}[$i]} ]]; then
        return 1
      fi
    done
  fi
}

function zsh-implement-p() {
  if [[ "$#" -eq 0 ]]; then
    return 1
  else
    case ${1} in
      history-incremental-pattern-search)
        if zle -al |grep history-incremental-pattern-search; then
          return 0
        else
          return 1
        fi
        ;;
      vcs_info)
        local p
        for p in $fpath; do
          if [[ -e ${p}/vcs_info ]]; then
            return 0
          fi
        done
        return 1
        ;;
      *)
        return 1
        ;;
    esac
  fi
}